name: Deploy Chatbot API

on:
  workflow_dispatch:
  # Disabled automatic triggers on main branch
  # push:
  #   branches:
  #     - main
  # pull_request:
  #   branches:
  #     - main

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: "3.11"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          pip install uv

      - name: Install dependencies
        run: |
          uv pip install -r requirements.txt

      # - name: Code quality checks
      #   run: |
      #     python -m black . --check
      #     python -m isort . --check-only
      #     python -m flake8 .

      - name: Type checking
        run: |
          python -m mypy src/ --ignore-missing-imports

      - name: Run tests
        run: |
          python -m pytest tests/ -v
        continue-on-error: true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install AWS CDK
        run: |
          npm install -g aws-cdk
          cdk --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install uv
        run: |
          pip install uv

      - name: Install dependencies
        run: |
          uv pip install -r requirements.txt
          cd infrastructure && uv pip install -r requirements.txt && cd ..

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        run: |
          # Determine environment based on branch (manual dispatch only)
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            ENVIRONMENT="prod"
          else
            ENVIRONMENT="dev"
          fi

          # CDK will handle Docker build/push automatically

      - name: CDK Bootstrap
        run: |
          cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }}

      - name: CDK Deploy
        run: |
          # Determine environment based on branch
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            ENVIRONMENT="prod"
          else
            ENVIRONMENT="dev"
          fi

          cd infrastructure
          cdk deploy --context account=${{ secrets.AWS_ACCOUNT_ID }} --context region=${{ env.AWS_REGION }} --context environment=$ENVIRONMENT --require-approval never

      - name: Get deployment outputs
        run: |
          # Determine environment based on branch
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            ENVIRONMENT="prod"
          else
            ENVIRONMENT="dev"
          fi

          cd infrastructure
          cdk output --context account=${{ secrets.AWS_ACCOUNT_ID }} --context region=${{ env.AWS_REGION }} --context environment=$ENVIRONMENT

  # security-scan:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Run security scan
  #       uses: github/super-linter@v4
  #       env:
  #         DEFAULT_BRANCH: main
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         VALIDATE_PYTHON_BLACK: false
  #         VALIDATE_PYTHON_ISORT: false
  #         VALIDATE_PYTHON_FLAKE8: false